#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Nov 17 20:21:21 2020

@author: Aidan
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Oct 26 20:48:28 2020

@author: Aidan
"""
import numpy as np
import matplotlib.pyplot as plt
import random


type1 = 351
type2a = 140
type2b = 116

MU_num = 87
deviation = 10
musc_group1 = []
musc_group2a = []
musc_group2b = []

tot_MU = []


def make_gauss(a,deviation):
   group = []
   for i in range(MU_num):  
      
      temp1 = random.gauss(a, deviation)
      temp1 = int(temp1)
      group.append(temp1)
            
   return group



musc_group1 = make_gauss(type1, deviation)
print(np.mean(musc_group1))

musc_group2a = make_gauss(type2a, deviation)
print(np.mean(musc_group2a))

musc_group2b = make_gauss(type2b,deviation)
print(np.mean(musc_group2b))


plt.figure(1)
plt.hist(musc_group1, bins = 20, fc=(0, 0, 1, 0.5),label = 'type1')
plt.hist(musc_group2a, bins = 20, fc=(1, 0, 1, 0.5),label = 'type2a')
plt.hist(musc_group2b, bins = 20, fc=(1, 0, 0, 0.5),label = 'type2b')
plt.xlabel('# of Muscle Fibers')
plt.ylabel('# of MU')
plt.title('Distrubition of Muscle Fibers per Motor Unit')
plt.legend()
plt.show()


tot_MU = np.zeros((3,87))
for r in range (3):
   for j in range(MU_num):
      if r == 0:
         tot_MU[r][j] = musc_group1[j]
      elif r == 1:
         tot_MU[r][j] = musc_group2a[j]
      else:
         tot_MU[r][j] = musc_group2b[j]
         

csa_fiber = []

csa_fiber1 = 7.43931e-5 #cm^2
csa_fiber2a = 5.2e-5
csa_fiber2b = 4e-5
csa_fiber.append(csa_fiber1)
csa_fiber.append(csa_fiber2a)
csa_fiber.append(csa_fiber2b)


ST1 = 9.1 #N/cm^2
ST2a = 10.2
ST2b = 12.2 

#Ffi = csa_fibertype*ST
Ff = []
Ff.append(csa_fiber1*ST1)
Ff.append(csa_fiber2a*ST2a)
Ff.append(csa_fiber2b*ST2b)

angle_pennation = 0.261799 #15 degrees but in radians
F_fiber = np.zeros(3)

def Force_per_MU(num_of_fibers):
   for fiber_type in range(3):
      F_fiber[fiber_type] = Ff[fiber_type]*num_of_fibers[fiber_type]*np.cos(angle_pennation)
      #F = Ffi*#_fiber_type*cos(angle_pennation)
   return F_fiber

num_of_fibers = np.zeros(3)
all_mu = np.zeros(87)
for j in range(MU_num):
   for r in range(3):
      num_of_fibers[r] = tot_MU[r][j] #gets the # of fibers for a given motor unit
   MU_force = Force_per_MU(num_of_fibers) #finds the force generated by the three sets of muscle fibers
   #print(MU_Force)
   all_mu[j] = MU_force[0]+MU_force[1]+MU_force[2]
   #print(all_mu[j])

total_force = np.zeros(87)
for i in range(len(all_mu)):
   if i == 0:
      total_force[i] = all_mu[i]
   else:
      total_force[i] = all_mu[i]+total_force[i-1]

plt.figure()
plt.plot(total_force)
plt.xlabel('# of Motor Units')
plt.ylabel('Total Force (N)')
plt.title('Force Generated Per Motor Unit Activated')

type1_Fiber = 30519
type2a_Fiber = 12165
type2b_Fiber = 12626
total_fibers = []
total_fibers.append(type1_Fiber)
total_fibers.append(type2a_Fiber)
total_fibers.append(type2b_Fiber)
Force_by_type = Force_per_MU(total_fibers)

tot_force = []
tot_force.append(0)
tot_force.append(Force_by_type[0])
tot_force.append(Force_by_type[0]+Force_by_type[1])
tot_force.append(Force_by_type[0]+Force_by_type[1]+Force_by_type[2])

type1_force = np.linspace(tot_force[0], tot_force[1], 48) # 48
type2a_force = np.linspace(tot_force[1],tot_force[2], 19) # 19
type2b_force = np.linspace(tot_force[2],tot_force[3], 20)# 20
 

type1_force = type1_force/max_force
type2a_force = type2a_force/max_force
type2b_force = type2b_force/max_force

t1_force = []
t2a_force = np.empty(48)
t2b_force = np.empty(67)
max_force = np.max(tot_force)
for i in range (len(type1_force)):
   hold = (type1_force[i])/max_force
   print(hold)
   np.append(t1_force,hold)
   
for i in range (len(type2a_force)):
   hold = (type2a_force[i])/max_force
   np.append(t2a_force,hold)
   
for i in range (len(type2b_force)):
   hold = (type2b_force[i])/max_force
   np.append(t2b_force,hold)


plt.figure()
plt.plot(tot_force)
plt.xlabel('# of Motor Units Scaled')
plt.ylabel('Total Force (N)')
plt.title('Force Generated Per Motor Unit Activated, MVIC')


plt.figure()
plt.plot(type1_force, color = 'b', label = 'type1')
plt.plot(type2a_force, color = 'k', label = 'type2a')
plt.plot(type2b_force, color = 'r', label = 'type2b')
plt.xlabel('# of Motor Units')
plt.ylabel('% MVIC')
plt.title('Force Generated Per Motor Unit Activated, MVIC')
plt.legend()



 